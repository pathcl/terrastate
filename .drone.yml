workspace:
  base: /srv/app
  path: src/github.com/webhippie/terrastate

pipeline:
  restore:
    image: plugins/s3-cache:1
    pull: true
    secrets: [ cache_s3_endpoint, cache_s3_access_key, cache_s3_secret_key ]
    restore: true
    when:
      local: false

  prepare:
    image: webhippie/golang:edge
    pull: true
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make clean
      - make retool

  vet:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make vet

  varcheck:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make varcheck

  structcheck:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make structcheck

  unconvert:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make unconvert

  ineffassign:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make ineffassign

  lint:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make lint

  test:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make test

  build:
    image: webhippie/golang:edge
    pull: true
    group: test
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make build

  release-prepare:
    image: webhippie/golang:edge
    pull: true
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make release-dirs
    when:
      event: [ push, tag ]
      branch: [ master ]

  release-linux:
    image: karalabe/xgo-latest:latest
    pull: true
    group: release
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make release-linux
    when:
      event: [ push, tag ]
      branch: [ master ]

  release-windows:
    image: karalabe/xgo-latest:latest
    pull: true
    group: release
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make release-windows
    when:
      event: [ push, tag ]
      branch: [ master ]

  release-darwin:
    image: karalabe/xgo-latest:latest
    pull: true
    group: release
    environment:
      - CGO_ENABLED=1
      - TAGS=
      - GOPATH=/srv/app
    commands:
      - make release-darwin
    when:
      event: [ push, tag ]
      branch: [ master ]

  docker-amd64:
    image: plugins/docker:17.05
    pull: true
    secrets: [ docker_username, docker_password ]
    group: docker
    repo: tboerger/terrastate
    tags: [ '${DRONE_TAG##v}' ]
    label_schema:
      - version=${DRONE_TAG##v}
    when:
      event: [ tag ]

  docker-amd64:
    image: plugins/docker:17.05
    pull: true
    secrets: [ docker_username, docker_password ]
    group: docker
    repo: tboerger/terrastate
    tags: [ latest ]
    label_schema:
      - version=latest
    when:
      event: [ push ]
      branch: [ master ]

  docker-arm:
    image: plugins/docker:17.05
    pull: true
    secrets: [ docker_username, docker_password ]
    group: docker
    repo: tboerger/terrastate
    tags: [ arm ]
    label_schema:
      - version=arm
    when:
      event: [ push ]
      branch: [ master ]

  docker-arm64:
    image: plugins/docker:17.05
    pull: true
    secrets: [ docker_username, docker_password ]
    group: docker
    repo: tboerger/terrastate
    tags: [ arm64 ]
    label_schema:
      - version=arm64
    when:
      event: [ push ]
      branch: [ master ]

  microbadger:
    image: plugins/webhook:1
    pull: true
    secrets:
      - source: microbadger_token
        target: plugin_urls
    when:
      event: [ push, tag ]
      branch: [ master ]

  rebuild:
    image: plugins/s3-cache:1
    pull: true
    secrets: [ cache_s3_endpoint, cache_s3_access_key, cache_s3_secret_key ]
    rebuild: true
    mount:
      - _tools/bin
      - _tools/pkg
    when:
      local: false
      event: [ push ]
      branch: [ master ]

  flush:
    image: plugins/s3-cache:1
    pull: true
    secrets: [ cache_s3_endpoint, cache_s3_access_key, cache_s3_secret_key ]
    flush: true
    flush_age: 14
    when:
      local: false
      event: [ push ]
      branch: [ master ]

  archive:
    image: plugins/s3:1
    pull: true
    secrets: [ s3_endpoint, aws_access_key_id, aws_secret_access_key, s3_bucket ]
    source: dist/release/*
    target: /misc/terrastate/${DRONE_TAG##v}
    strip_prefix: dist/release/
    path_style: true
    when:
      event: [ tag ]

  archive:
    image: plugins/s3:1
    pull: true
    secrets: [ s3_endpoint, aws_access_key_id, aws_secret_access_key, s3_bucket ]
    source: dist/release/*
    target: /misc/terrastate/master
    strip_prefix: dist/release/
    path_style: true
    when:
      event: [ push ]
      branch: [ master ]

  github:
    image: plugins/github-release:1
    pull: true
    secrets: [ github_token ]
    files:
      - dist/release/*
    when:
      event: [ tag ]

  gitter:
    image: plugins/gitter:1
    pull: true
    secrets: [ gitter_webhook ]
    when:
      local: false
      status: [ success, failure ]
